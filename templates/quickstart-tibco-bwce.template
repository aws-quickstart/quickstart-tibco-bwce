{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template builds a base TIBCO BWCE docker image, creates an ECR repo with name 'tibco-bwce' and pushes base docker image into the ECR repo. It then leverages an existing VPC. \n",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [{
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "VPCID",
                        "VPCCIDR",
                        "PrivateSubnet1ID",
                        "PrivateSubnet2ID",
                        "PublicSubnet1ID",
                        "PublicSubnet2ID",
                        "AdminIngressLocation"
                    ]
                },
                {
                    "Label": {
                        "default": "ECS Cluster + Studio Configuration"
                    },
                    "Parameters": [
                        "ClusterSize",
                        "InstanceType",
                        "VolSize",
                        "InstanceTypeStudioImage",
                        "VolSizeStudioImage",
                        "KeyName"
                    ]
                },
                {
                    "Label": {
                        "default": "Base Image Customization Configuration"
                    },
                    "Parameters": [
                        "EcrRepoName",
                        "PluginList",
                        "ExtBucket",
                        "ExtBucketName"
                    ]
                },
                {
                    "Label": {
                        "default": "Monitoring Configuration"
                    },
                    "Parameters": [
                        "InstMonitoring",
                        "MonInstanceType"
                    ]
                },
                {
                    "Label": {
                        "default": "AWS Quickstart Configuration"
                    },
                    "Parameters": [
                        "QSS3BucketName",
                        "QSS3KeyPrefix"
                    ]
                }
            ],
            "ParameterLabels": {
                "PrivateSubnet1ID": {
                    "default": "Private Subnet ID 1"
                },
                "PrivateSubnet2ID": {
                    "default": "Private Subnet ID 2"
                },
                "PublicSubnet1ID": {
                    "default": "Public Subnet ID 1"
                },
                "PublicSubnet2ID": {
                    "default": "Public Subnet ID 2"
                },
                "AdminIngressLocation": {
                    "default": "Admin Ingress Location"
                },
                "VPCID": {
                    "default": "VPC ID"
                },
                "VPCCIDR": {
                    "default": "VPC CIDR"
                },
                "ClusterSize": {
                    "default": "ECS Cluster Size:"
                },
                "InstanceType": {
                    "default": "ECS Cluster Instance Type:"
                },
                "VolSize": {
                    "default": "ECS Cluster Volume Size:"
                },
                "InstanceTypeStudioImage": {
                    "default": "Studio EC2 Instance Type:"
                },
                "VolSizeStudioImage":{
                    "default": "Studio EC2 Volume Size:"
                },
                "KeyName": {
                    "default": "Key Pair:"
                },
                "ExtBucket": {
                    "default": "Create S3 Bucket for Base Image Customization?"
                },
                "ExtBucketName": {
                    "default": "S3 Bucket Name:"
                },
                "PluginList": {
                    "default": "List of Plug-ins:"
                },
                "EcrRepoName": {
                    "default": "ECR Repo Name"
                },
                "QSS3BucketName": {
                    "default": "Quick Start S3 Bucket Name"
                },
                "QSS3KeyPrefix": {
                    "default": "Quick Start S3 Key Prefix"
                },
                "InstMonitoring": {
                    "default": "Install Monitoring Application?"
                },
                "MonInstanceType": {
                    "default": "Monitoring Instance Type:"
                }
            }
        }
    },
    "Parameters":{
      "ClusterSize": {
          "Description": "Number of EC2 instances to be created initially in the ECS Cluster (1-1000). This value will be used to set the Min, Max & Desired count of instances in the Auto Scaling Group.",
          "Type": "Number",
          "Default": 2,
          "MaxValue": 1000,
          "MinValue": 1,
          "ConstraintDescription": "ClusterSize must be numeric and between 1 and 1000."
      },
      "InstanceType": {
          "Description": "Select an instance type for EC2 instances to be created in the ECS cluster.",
          "Type": "String",
          "Default": "t2.medium",
          "AllowedValues": [
              "t2.micro",
              "t2.small",
              "t2.medium",
              "t2.large",
              "t2.xlarge",
              "t2.2xlarge",
              "m4.large",
              "m4.xlarge",
              "m4.2xlarge",
              "m4.4xlarge",
              "m4.10xlarge",
              "m4.16xlarge",
              "m3.medium",
              "m3.large",
              "m3.xlarge",
              "m3.2xlarge",
              "c4.large",
              "c4.xlarge",
              "c4.2xlarge",
              "c4.4xlarge",
              "c4.8xlarge",
              "c3.large",
              "c3.xlarge",
              "c3.2xlarge",
              "c3.4xlarge",
              "c3.8xlarge",
              "f1.2xlarge",
              "f1.16xlarge",
              "g3.4xlarge",
              "g3.8xlarge",
              "g3.16xlarge",
              "g2.2xlarge",
              "g2.8xlarge",
              "p2.xlarge",
              "p2.8xlarge",
              "p2.16xlarge",
              "r4.large",
              "r4.xlarge",
              "r4.2xlarge",
              "r4.4xlarge",
              "r4.8xlarge",
              "r4.16xlarge",
              "r3.large",
              "r3.xlarge",
              "r3.2xlarge",
              "r3.4xlarge",
              "r3.8xlarge",
              "x1.16xlarge",
              "x1.32xlarge",
              "d2.xlarge",
              "d2.2xlarge",
              "d2.4xlarge",
              "d2.8xlarge",
              "i2.xlarge",
              "i2.2xlarge",
              "i2.4xlarge",
              "i2.8xlarge",
              "i3.large",
              "i3.xlarge",
              "i3.2xlarge",
              "i3.4xlarge",
              "i3.8xlarge",
              "i3.16xlarge"
          ],
          "ConstraintDescription": "InstanceType must be a valid EC2 instance type."
      },
      "InstanceTypeStudioImage": {
          "Description": "Select an instance type that runs your BusinessWorks Container Edition studio.",
          "Type": "String",
          "Default": "m3.large",
          "AllowedValues":[
            "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "m4.large",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge"
          ],
          "ConstraintDescription": "InstanceTypeStudioImage must be a valid EC2 instance type."
      },
      "AdminIngressLocation": {
          "Description": "CIDR block (IP address range) to allow SSH and VNC access to your BWCE studio instance. Use 0.0.0.0/0 to allow access from all locations. You can always manually change this later if needed.",
          "Type": "String",
          "MinLength": "9",
          "MaxLength": "18",
          "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
          "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "VolSize": {
          "Description": "Volume Size (GB) for ECS cluster instances.",
          "Type": "Number",
          "Default": 30,
          "MaxValue": 16384,
          "MinValue": 30,
          "ConstraintDescription": "VolumeSize must be numeric and between 30 and 16384."
      },
      "VolSizeStudioImage":{
          "Description": "Volume Size  (GB) for EC2 instance running BusinessWorks Container Edition studio.",
          "Type": "Number",
          "Default": 40,
          "MaxValue": 100,
          "MinValue": 40,
          "ConstraintDescription": "VolSizeStudioImage must be numeric and between 40 and 100."
      },
      "KeyName": {
          "Description": "Select an existing key pair. You must provide existing key pair to be able to SSH into EC2 instances.",
          "Type": "AWS::EC2::KeyPair::KeyName",
          "MinLength": 1,
          "MaxLength": 64,
          "AllowedPattern": "[-_ a-zA-Z0-9]*",
          "ConstraintDescription": "Must be the name of an existing key pair. It can contain only alphanumeric characters, spaces, dashes and underscores."
      },
      "ExtBucket": {
          "Description": "Do you want to create a new S3 bucket & required folder structure for extending base image? You can upload third-party drivers, OSGI bundles, certificates, plugins etc. in this bucket to extend the base image later.",
          "Type": "String",
          "AllowedValues": [
              "Yes",
              "No"
          ],
          "Default": "No",
          "ConstraintDescription": "The value should be Yes/No."
      },
      "ExtBucketName": {
          "Description": "Prodive name for S3 bucket to be created, if you selected the previous option as 'Yes'.",
          "Type": "String",
          "MaxLength": 63,
          "ConstraintDescription": "Must comply with AWS S3 bucket naming convention."
      },
      "PluginList": {
          "Description": "Provide list of IDs of supported Plug-ins to be added in the customized image, e.g. for including Data Conversion, MongoDB and S3 plug-ins, provide the value as 'DC,MongoDB,S3'. This list should be comma separated and should not include any space inbetween. The list of supported Plug-ins are - AMQP (Plug-in for AMQP), DC (Plug-in for Data Conversion), DCRM (Plug-in for Microsoft Dynamics CRM), Kafka (Plug-in for Apache Kafka), MongoDB (Plug-in for MongoDB), MQ (Plug-in for WebSphere MQ), OData (Plug-in for OData), S3 (Plug-in for Amazon S3), ServiceNow (Plug-in for ServiceNow), SFDC (Plug-in for Salesforce.com).",
          "Type": "String"
      },
      "EcrRepoName": {
          "Description": "Name of EC2 Container Registry (ECR) to be created to store customized image. This image will have the plugins you selected installed within it.",
          "Type": "String",
          "MinLength": 4,
          "MaxLength": 64,
          "ConstraintDescription": "EcrRepoName parameter is mandatory."
      },
      "InstMonitoring": {
          "Description": "Do you want to install monitoring application?",
          "Type": "String",
          "AllowedValues": [
              "Yes",
              "No"
          ],
          "Default": "No",
          "ConstraintDescription": "The value should be Yes/No."
      },
      "MonInstanceType": {
          "Description": "Select an instance type for Monitoring EC2 instance.",
          "Type": "String",
          "Default": "t2.medium",
          "AllowedValues": [
              "t2.micro",
              "t2.small",
              "t2.medium",
              "t2.large",
              "t2.xlarge",
              "t2.2xlarge",
              "m4.large",
              "m4.xlarge",
              "m4.2xlarge",
              "m4.4xlarge",
              "m4.10xlarge",
              "m4.16xlarge",
              "m3.medium",
              "m3.large",
              "m3.xlarge",
              "m3.2xlarge",
              "c4.large",
              "c4.xlarge",
              "c4.2xlarge",
              "c4.4xlarge",
              "c4.8xlarge",
              "c3.large",
              "c3.xlarge",
              "c3.2xlarge",
              "c3.4xlarge",
              "c3.8xlarge",
              "f1.2xlarge",
              "f1.16xlarge",
              "g3.4xlarge",
              "g3.8xlarge",
              "g3.16xlarge",
              "g2.2xlarge",
              "g2.8xlarge",
              "p2.xlarge",
              "p2.8xlarge",
              "p2.16xlarge",
              "r4.large",
              "r4.xlarge",
              "r4.2xlarge",
              "r4.4xlarge",
              "r4.8xlarge",
              "r4.16xlarge",
              "r3.large",
              "r3.xlarge",
              "r3.2xlarge",
              "r3.4xlarge",
              "r3.8xlarge",
              "x1.16xlarge",
              "x1.32xlarge",
              "d2.xlarge",
              "d2.2xlarge",
              "d2.4xlarge",
              "d2.8xlarge",
              "i2.xlarge",
              "i2.2xlarge",
              "i2.4xlarge",
              "i2.8xlarge",
              "i3.large",
              "i3.xlarge",
              "i3.2xlarge",
              "i3.4xlarge",
              "i3.8xlarge",
              "i3.16xlarge"
          ],
          "ConstraintDescription": "InstanceType must be a valid EC2 instance type."
      },
      "QSS3BucketName": {
          "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
          "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
          "Default": "quickstart-reference",
          "Description": "S3 bucket name for the Quick Start assets. This string can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
          "Type": "String"
      },
      "QSS3KeyPrefix": {
          "AllowedPattern": "^[0-9a-zA-Z-/]*$",
          "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
          "Default": "tibco/bwce/latest/",
          "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
          "Type": "String"
      },
      "PrivateSubnet1ID": {
          "Description": "ID of private subnet 1 in Availability Zone 1 for the Workload (e.g., subnet-c0236ecd)",
          "Type": "AWS::EC2::Subnet::Id"
      },
      "PrivateSubnet2ID": {
          "Description": "ID of private subnet 2 in Availability Zone 2 for the Workload (e.g., subnet-bdf5347d)",
          "Type": "AWS::EC2::Subnet::Id"
      },
      "PublicSubnet1ID": {
          "Description": "ID of public subnet 1 in Availability Zone 1 for the ELB load balancer (e.g., subnet-0ba63bb)",
          "Type": "AWS::EC2::Subnet::Id"
      },
      "PublicSubnet2ID": {
          "Description": "ID of public subnet 2 in Availability Zone 2 for the ELB load balancer (e.g., subnet-e323d09)",
          "Type": "AWS::EC2::Subnet::Id"
      },
      "VPCCIDR": {
          "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$",
          "ConstraintDescription": "CIDR block parameter must be in the form x.x.x.x/16-28",
          "Default": "10.0.0.0/16",
          "Description": "CIDR block for the VPC",
          "Type": "String"
      },
      "VPCID": {
          "Description": "ID of your existing VPC for deployment",
          "Type": "AWS::EC2::VPC::Id"
        }
    },
    "Conditions": {
        "HasKeyName": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "KeyName"
                        },
                        ""
                    ]
                }
            ]
        },
        "CreateS3Bucket": {
            "Fn::Equals": [
                {
                    "Ref": "ExtBucket"
                },
                "Yes"
            ]
        },
        "HasVolSize": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "VolSize"
                        },
                        ""
                    ]
                }
            ]
        },
        "HasVolStudioSize": {
            "Fn::Not":[
                {
                    "Fn::Equals": [
                        {
                            "Ref": "VolSizeStudioImage"
                        },
                        ""
                    ]
                }
            ]
        },
        "InstallMonitoringApp": {
            "Fn::Equals": [
                {
                    "Ref": "InstMonitoring"
                },
                "Yes"
            ]
        }
    },
    "Rules": {
        "SubnetsInVPC": {
            "Assertions": [{
                "Assert": {
                    "Fn::EachMemberIn": [{
                            "Fn::ValueOfAll": [
                                "AWS::EC2::Subnet::Id",
                                "VpcId"
                            ]
                        },
                        {
                            "Fn::RefAll": "AWS::EC2::VPC::Id"
                        }
                    ]
                },
                "AssertDescription": "All subnets must be in the VPC"
            }]
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "us-east-1": {
                "AMI": "ami-bb36d5c6"
            },
            "us-east-2": {
                "AMI": "ami-fb5a6d9e"
            },
            "us-west-1": {
                "AMI": "ami-96878ff6"
            },
            "us-west-2": {
                "AMI": "ami-1273fc6a"
            },
            "eu-west-1": {
                "AMI": "ami-90b0c9e9"
            },
            "eu-west-2": {
                "AMI": "ami-37fc1850"
            },
            "eu-central-1": {
                "AMI": "ami-b72b49d8"
            },
            "ap-northeast-1": {
                "AMI": "ami-6da8d20b"
            },
            "ap-southeast-1": {
                "AMI": "ami-19d69865"
            },
            "ap-southeast-2": {
                "AMI": "ami-cfd512ad"
            },
            "ca-central-1": {
                "AMI": "ami-66df5802"
            }
        }
    },
    "Resources":{
      "ECSHostSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
              "VpcId": {
                  "Ref": "VPCID"
              },
              "GroupDescription": "Access to the ECS hosts and the tasks/containers that run on them",
              "SecurityGroupIngress": [
                  {
                      "SourceSecurityGroupId": {
                          "Ref": "LoadBalancerSecurityGroup"
                      },
                      "IpProtocol": -1
                  }
              ],
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                          "Fn::Sub": "${AWS::StackName}-ECS-Hosts"
                      }
                  }
              ]
          }
      },
      "MonSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
              "VpcId": {
                  "Ref": "VPCID"
              },
              "GroupDescription": "Access to the BWCE Monitoring Application instance",
              "SecurityGroupIngress": [
                  {
                      "IpProtocol": "tcp",
                      "FromPort": "8080",
                      "ToPort": "8080",
                      "CidrIp": {
                          "Ref": "AdminIngressLocation"
                        }
                  }
              ],
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                          "Fn::Sub": "${AWS::StackName}-Mon-Host"
                      }
                  }
              ]
          }
      },
      "EC2SecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
            "VpcId": {
                "Ref": "VPCID"
            },
            "GroupDescription": "Base security group for EC2 BusinessWorks Container Edition Instance",
            "SecurityGroupIngress": [
                {
                    "IpProtocol": "tcp",
                    "CidrIp": {
                       "Ref": "AdminIngressLocation"
                    },
                    "FromPort": "22",
                    "ToPort": "22"
                },
                {
                    "IpProtocol": "tcp",
                    "CidrIp": {
                       "Ref": "AdminIngressLocation"
                    },
                    "FromPort": "5905",
                    "ToPort": "5905"
                }
            ]
        }
      },
      "LoadBalancerSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
              "VpcId": {
                  "Ref": "VPCID"
              },
              "GroupDescription": "Access to the load balancer that sits in front of ECS",
              "SecurityGroupIngress": [
                  {
                      "CidrIp": "0.0.0.0/0",
                      "IpProtocol": -1
                  }
              ],
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                          "Fn::Sub": "${AWS::StackName}-LoadBalancers"
                      }
                  }
              ]
          }
      },
      "DefaultTargetGroup": {
          "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
          "Properties": {
              "VpcId": {
                  "Ref": "VPCID"
              },
              "Port": 8080,
              "Protocol": "HTTP",
              "HealthCheckPath": "/_ping",
              "HealthCheckPort": 7777,
              "HealthCheckProtocol": "HTTP",
              "Matcher": {
                  "HttpCode": "200,302"
              },
              "HealthCheckIntervalSeconds": 30,
              "HealthCheckTimeoutSeconds": 5,
              "HealthyThresholdCount": 3,
              "UnhealthyThresholdCount": 2
          }
      },
      "LoadBalancer": {
          "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
          "Properties": {
              "Subnets": [
                  {
                      "Ref": "PublicSubnet1ID"
                  },
                  {
                      "Ref": "PublicSubnet2ID"
                  }
              ],
              "SecurityGroups": [
                  {
                      "Ref": "LoadBalancerSecurityGroup"
                  }
              ]
          }
      },
      "LoadBalancerListener": {
          "Type": "AWS::ElasticLoadBalancingV2::Listener",
          "Properties": {
              "LoadBalancerArn": {
                  "Ref": "LoadBalancer"
              },
              "Port": 8080,
              "Protocol": "HTTP",
              "DefaultActions": [
                  {
                      "Type": "forward",
                      "TargetGroupArn": {
                          "Ref": "DefaultTargetGroup"
                      }
                  }
              ]
          }
      },
      "MonitoringInstance": {
          "Type": "AWS::EC2::Instance",
          "Condition": "InstallMonitoringApp",
          "Properties": {
              "ImageId": {
                  "Fn::FindInMap": [
                      "AWSAMIRegionMap",
                      {
                          "Ref": "AWS::Region"
                      },
                      "AMI"
                  ]
              },
              "InstanceType": {
                  "Ref": "MonInstanceType"
              },
              "KeyName": {
                  "Fn::If": [
                      "HasKeyName",
                      {
                          "Ref": "KeyName"
                      },
                      {
                          "Ref": "AWS::NoValue"
                      }
                  ]
              },
              "IamInstanceProfile": {
                  "Ref": "ECSInstanceProfile"
              },
              "SecurityGroupIds": [
                  {
                      "Fn::GetAtt": [
                          "MonSecurityGroup",
                          "GroupId"
                      ]
                  }
              ],
              "SubnetId": {
                  "Ref": "PublicSubnet2ID"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                          "Fn::Sub": "${AWS::StackName} Monitoring Host"
                      }
                  }
              ],
              "UserData": {
                  "Fn::Base64": {
                      "Fn::Sub": "#!/bin/bash\necho 'BWCE-AWS: Start of Monitoring Instance UserData execution...'\nexport PATH=/home/ec2-user/.local/bin:$PATH\nexport PYTHONPATH=$PYTHONPATH:/home/ec2-user/.local/lib/python2.7/site-packages\n\necho 'BWCE-AWS: Install Docker-ce...'\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum -y install docker-ce\nsudo systemctl start docker\nsudo usermod -aG docker $USER\n\necho 'BWCE-AWS: Install Docker-Compose...'\nsudo pip install docker-compose\nsudo yum upgrade -y python*\n\necho 'BWCE-AWS: Install Monitoring Application...'\n$( aws ecr get-login --region ${AWS::Region} --no-include-email )\ncd /home/ec2-user/bwce/bwce-mon/\ndocker-compose up -d mysql_db\ndocker-compose up -d mon_app\n\nif aws ecr describe-repositories --region ${AWS::Region} --repository-names tibco-bwce-mon | grep repositoryUri; then\n    echo 'BWCE-AWS: Repository already exists, skipping repository creation...'\nelse \n    aws ecr create-repository --region ${AWS::Region} --repository-name tibco-bwce-mon\nfi\ndocker tag bwcemon_mon_app:latest ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/tibco-bwce-mon:2.3.3\ndocker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/tibco-bwce-mon:2.3.3\necho 'BWCE-AWS: End of Monitoring Instance UserData execution...'\n"
                  }
              }
          }
      },
      "InitialEC2Setup": {
          "Type": "AWS::EC2::Instance",
          "Properties": {
              "ImageId": {
                  "Fn::FindInMap": [
                      "AWSAMIRegionMap",
                      {
                          "Ref": "AWS::Region"
                      },
                      "AMI"
                  ]
              },
              "InstanceType": "t2.medium",
              "KeyName": {
                  "Fn::If": [
                      "HasKeyName",
                      {
                          "Ref": "KeyName"
                      },
                      {
                          "Ref": "AWS::NoValue"
                      }
                  ]
              },
              "IamInstanceProfile": {
                  "Ref": "ECSInstanceProfile"
              },
              "InstanceInitiatedShutdownBehavior": "terminate",
              "SecurityGroupIds": [
                  {
                      "Ref": "EC2SecurityGroup"
                  }
              ],
              "SubnetId": {
                  "Ref": "PublicSubnet1ID"
              },
              "UserData": {
                  "Fn::Base64": {
                      "Fn::Sub": "#!/bin/bash\necho 'BWCE-AWS: Start of EC2 Instance UserData execution...'\nexport PATH=/home/ec2-user/.local/bin:$PATH\nexport PYTHONPATH=$PYTHONPATH:/home/ec2-user/.local/lib/python2.7/site-packages\n\necho 'BWCE-AWS: Install Docker-ce...'\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nsudo yum -y install docker-ce\nsudo systemctl start docker\nsudo usermod -aG docker $USER\n\npluginListName=${PluginList}\nif [[ -n \"$pluginListName\" ]]; then\n    echo 'BWCE-AWS: Provided List of Plug-ins... ' ${PluginList}\n    for pluginName in $(echo ${PluginList} | tr ',' '\\n')\n    do\n        if [ $pluginName == 'DC' ]; then\n            echo 'BWCE-AWS: Copying DC Plugin Runtime...'\n            cp /home/ec2-user/bwce/installers/plugins/DC/TIB_bwdcp_4.5.1_v4.1_bwce-runtime.zip /home/ec2-user/bwce/bwce-docker/resources/addons/plugins/TIB_bwdcp_4.5.1_v4.1_bwce-runtime.zip || true\n        elif [ $pluginName == 'DCRM' ]; then\n            echo 'BWCE-AWS: Copying DCRM Plugin Runtime...'\n            cp /home/ec2-user/bwce/installers/plugins/DCRM/TIB_bwplugindynamicscrm_6.4.0_v14_bwce-runtime.zip /home/ec2-user/bwce/bwce-docker/resources/addons/plugins/TIB_bwplugindynamicscrm_6.4.0_v14_bwce-runtime.zip || true\n        elif [ $pluginName == 'MongoDB' ]; then\n            echo 'BWCE-AWS: Copying MongoDB Plugin Runtime...'\n            cp /home/ec2-user/bwce/installers/plugins/MongoDB/TIB_bwpluginmongodb_6.1.1_v1.5_bwce-runtime.zip /home/ec2-user/bwce/bwce-docker/resources/addons/plugins/TIB_bwpluginmongodb_6.1.1_v1.5_bwce-runtime.zip || true\n        elif [ $pluginName == 'SFDC' ]; then\n            echo 'BWCE-AWS: Copying SFDC Plugin Runtime...'\n            cp /home/ec2-user/bwce/installers/plugins/SFDC/TIB_bwpluginsalesforce_6.2.1_v1.3_bwce-runtime.zip /home/ec2-user/bwce/bwce-docker/resources/addons/plugins/TIB_bwpluginsalesforce_6.2.1_v1.3_bwce-runtime.zip || true\n        elif [ $pluginName == 'ServiceNow' ]; then\n            echo 'BWCE-AWS: Copying ServiceNow Plugin Runtime...'\n            cp /home/ec2-user/bwce/installers/plugins/ServiceNow/TIB_bwpluginservicenow_6.0.0_v19.0.2_bwce-runtime.zip /home/ec2-user/bwce/bwce-docker/resources/addons/plugins/TIB_bwpluginservicenow_6.0.0_v19.0.2_bwce-runtime.zip || true\n        elif [ $pluginName == 'MQ' ]; then\n            echo 'BWCE-AWS: Copying MQ Plugin Runtime...'\n            cp /home/ec2-user/bwce/installers/plugins/MQ/TIB_bwmq_8.5.1_v4.2_bwce-runtime.zip /home/ec2-user/bwce/bwce-docker/resources/addons/plugins/TIB_bwmq_8.5.1_v4.2_bwce-runtime.zip || true\n        elif [ $pluginName == 'OData' ]; then\n            echo 'BWCE-AWS: Copying OData Plugin Runtime...'\n            cp /home/ec2-user/bwce/installers/plugins/OData/TIB_bwpluginodata_6.0.1_v3.1_bwce-runtime.zip /home/ec2-user/bwce/bwce-docker/resources/addons/plugins/TIB_bwpluginodata_6.0.1_v3.1_bwce-runtime.zip || true\n        elif [ $pluginName == 'AMQP' ]; then\n            echo 'BWCE-AWS: Copying AMQP Plugin Runtime...'\n            cp /home/ec2-user/bwce/installers/plugins/AMQP/TIB_bwpluginamqp_6.0.1_v5_bwce-runtime.zip /home/ec2-user/bwce/bwce-docker/resources/addons/plugins/TIB_bwpluginamqp_6.0.1_v5_bwce-runtime.zip || true\n        elif [ $pluginName == 'Kafka' ]; then\n            echo 'BWCE-AWS: Copying Kafka Plugin Runtime...'\n            cp /home/ec2-user/bwce/installers/plugins/Kafka/TIB_bwpluginkafka_6.0.0_v16.2_bwce-runtime.zip /home/ec2-user/bwce/bwce-docker/resources/addons/plugins/TIB_bwpluginkafka_6.0.0_v16.2_bwce-runtime.zip || true\n        elif [ $pluginName == 'S3' ]; then\n            echo 'BWCE-AWS: Copying S3 Plugin Runtime...'\n            cp /home/ec2-user/bwce/installers/plugins/S3/TIB_bwpluginawss3_6.0.0_v9.3_bwce-runtime.zip /home/ec2-user/bwce/bwce-docker/resources/addons/plugins/TIB_bwpluginawss3_6.0.0_v9.3_bwce-runtime.zip || true\n        fi\n    done\nelse \n    echo 'BWCE-AWS: List of Plug-ins not provided...'\nfi\n\n$( aws ecr get-login --region ${AWS::Region} --no-include-email )\nif aws ecr describe-repositories --region ${AWS::Region} --repository-names ${EcrRepoName} | grep repositoryUri; then\n    echo 'BWCE-AWS: Repository already exists, skipping repository creation...'\nelse\n    aws ecr create-repository --region ${AWS::Region} --repository-name ${EcrRepoName}\nfi\n chmod -x /home/ec2-user/bwce/bwce-docker/createDockerImage.sh\ncd /home/ec2-user/bwce/bwce-docker/\nrm -f /home/ec2-user/bwce/bwce-docker/resources/bwce-runtime/bwceruntime-aws-2.3.3.zip\n./createDockerImage.sh /home/ec2-user/bwce/bwce-runtime/bwceruntime-aws-2.3.3.zip tibco/bwce:2.3.3\nif aws ecr describe-repositories --region ${AWS::Region} --repository-names tibco-bwce | grep repositoryUri; then\n    echo 'BWCE-AWS: Repository already exists, skipping repository creation...'\nelse \n    aws ecr create-repository --region ${AWS::Region} --repository-name tibco-bwce\nfi\ndocker tag tibco/bwce:2.3.3 ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/tibco-bwce:2.3.3\ndocker push ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/tibco-bwce:2.3.3\nif [ ${ExtBucket} == 'Yes' ]; then\n    if aws s3api get-bucket-location --bucket ${ExtBucketName} | grep LocationConstraint; then\n        echo 'BWCE-AWS: S3 Bucket already exists, skipping bucket creation...'\n    else \n        aws s3 mb s3://${ExtBucketName}\n    fi\n    aws s3api put-object --bucket ${ExtBucketName} --key certs/\n    aws s3api put-object --bucket ${ExtBucketName} --key jars/\n    aws s3api put-object --bucket ${ExtBucketName} --key lib/\n    aws s3api put-object --bucket ${ExtBucketName} --key monitor-agents/\n    aws s3api put-object --bucket ${ExtBucketName} --key plugins/\n    aws s3api put-object --bucket ${ExtBucketName} --key thirdparty-installs/\nfi\necho 'BWCE-AWS: End of EC2 Instance UserData execution, shutting down...'\nsudo poweroff\n"
                  }
              }
          }
      },
      "StudioEC2Instance": {
          "Type": "AWS::EC2::Instance",
          "Properties": {
              "ImageId": {
                  "Fn::FindInMap": [
                      "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMI"
                  ]
              },
              "InstanceType": {
                  "Ref": "InstanceTypeStudioImage"
              },
              "KeyName": {
                  "Fn::If": [
                      "HasKeyName",
                      {
                          "Ref": "KeyName"
                      },
                      {
                          "Ref": "AWS::NoValue"
                      }
                  ]
              },
              "SecurityGroupIds": [
                  {
                      "Ref": "EC2SecurityGroup"
                  }
              ],
              "SubnetId": {
                  "Ref": "PublicSubnet1ID"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                          "Fn::Sub": "${AWS::StackName} - BWCE Studio"
                      }
                  }
              ],

              "UserData": {
                  "Fn::Base64": {
                      "Fn::Sub": "#!/bin/bash\nyum update -y\necho 'BWCE-AWS: Install Docker-ce...'\nyum install -y yum-utils device-mapper-persistent-data lvm2\nyum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\nyum -y install docker-ce\nsystemctl start docker\nusermod -aG docker ec2-user\nyum groupinstall -y 'GNOME Desktop' 'Graphical Administration Tools'\nyum install -y tigervnc-server xorg-x11-fonts-Type1\ncp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:5.service\nsed -i -e 's/<USER>/ec2-user/g' /etc/systemd/system/vncserver@:5.service\nmkdir '/home/ec2-user/bwce/bwce-studio'\nchmod 755 '/home/ec2-user/bwce/bwce-studio' \nmkdir '/home/ec2-user/bwce/installers/bwce/BWCE-install'\nunzip '/home/ec2-user/bwce/installers/bwce/TIB_bwce_2.3.3_linux26gl23_x86_64.zip' -d '/home/ec2-user/bwce/installers/bwce/BWCE-install'\nsed -i -e 's#/opt/tibco/bwce#/home/ec2-user/bwce/bwce-studio#g' /home/ec2-user/bwce/installers/bwce/BWCE-install/TIBCOUniversalInstaller_bwce_2.3.3.silent\ncd /home/ec2-user/bwce/installers/bwce/BWCE-install\n./TIBCOUniversalInstaller-lnx-x86-64.bin -silent\nmkdir -p '/home/ec2-user/.vnc'\nchmod 777 '/home/ec2-user/.vnc'\nrunuser -l ec2-user -c 'vncpasswd -f <<<${AWS::StackName} > '/home/ec2-user/.vnc/passwd''\nrunuser -l ec2-user -c 'chmod 600 '/home/ec2-user/.vnc/passwd''\nrunuser -l ec2-user -c 'vncserver'\nsystemctl daemon-reload\nsystemctl start vncserver@:5.service\nsystemctl enable vncserver@:5.service"
                  }
              }
          }
      },
      "ECSCluster": {
          "Type": "AWS::ECS::Cluster",
          "Properties": {
              "ClusterName": {
                  "Ref": "AWS::StackName"
              }
          }
      },
      "ECSAutoScalingGroup": {
          "Type": "AWS::AutoScaling::AutoScalingGroup",
          "Properties": {
              "VPCZoneIdentifier": [
                  {
                      "Ref": "PrivateSubnet1ID"
                  },
                  {
                      "Ref": "PrivateSubnet2ID"
                  }
              ],
              "LaunchConfigurationName": {
                  "Ref": "ECSLaunchConfiguration"
              },
              "MinSize": {
                  "Ref": "ClusterSize"
              },
              "MaxSize": {
                  "Ref": "ClusterSize"
              },
              "DesiredCapacity": {
                  "Ref": "ClusterSize"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                          "Fn::Sub": "${AWS::StackName} ECS host"
                      },
                      "PropagateAtLaunch": true
                  }
              ]
          },
          "CreationPolicy": {
              "ResourceSignal": {
                  "Timeout": "PT15M"
              }
          },
          "UpdatePolicy": {
              "AutoScalingRollingUpdate": {
                  "MinInstancesInService": 1,
                  "MaxBatchSize": 1,
                  "PauseTime": "PT15M",
                  "WaitOnResourceSignals": true
              }
          }
      },
      "ECSLaunchConfiguration": {
          "Type": "AWS::AutoScaling::LaunchConfiguration",
          "Properties": {
              "ImageId": {
                  "Fn::FindInMap": [
                      "AWSAMIRegionMap",
                      {
                          "Ref": "AWS::Region"
                      },
                      "AMI"
                  ]
              },
              "InstanceType": {
                  "Ref": "InstanceType"
              },
              "KeyName": {
                  "Fn::If": [
                      "HasKeyName",
                      {
                          "Ref": "KeyName"
                      },
                      {
                          "Ref": "AWS::NoValue"
                      }
                  ]
              },
              "BlockDeviceMappings": [
                  {
                      "DeviceName": "/dev/sda1",
                      "Ebs": {
                          "DeleteOnTermination": false,
                          "VolumeType": "gp2",
                          "VolumeSize": {
                              "Fn::If": [
                                  "HasVolSize",
                                  {
                                      "Ref": "VolSize"
                                  },
                                  30
                              ]
                          }
                      }
                  }
              ],
              "AssociatePublicIpAddress": true,
              "SecurityGroups": [
                  {
                      "Ref": "ECSHostSecurityGroup"
                  }
              ],
              "IamInstanceProfile": {
                  "Ref": "ECSInstanceProfile"
              },
              "UserData": {
                  "Fn::Base64": {
                      "Fn::Sub": "#!/bin/bash\necho ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config\necho ECS_CHECKPOINT=false >> /etc/ecs/ecs.config\necho ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=8m >> /etc/ecs/ecs.config\necho ECS_DISABLE_IMAGE_CLEANUP=false >> /etc/ecs/ecs.config\necho ECS_IMAGE_CLEANUP_INTERVAL=15m >> /etc/ecs/ecs.config\necho ECS_IMAGE_MINIMUM_CLEANUP_AGE=1h >> /etc/ecs/ecs.config\necho ECS_NUM_IMAGES_DELETE_PER_CYCLE=5 >> /etc/ecs/ecs.config\nsudo systemctl enable docker-container@ecs-agent.service\nsudo systemctl start docker-container@ecs-agent.service\n/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration\n/opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup\nexport PATH=/home/ec2-user/.local/bin:$PATH\nexport PYTHONPATH=$PYTHONPATH:/home/ec2-user/.local/lib/python2.7/site-packages\n$( aws ecr get-login --region ${AWS::Region} --no-include-email )\n"
                  }
              }
          },
              "Metadata": {
                  "AWS::CloudFormation::Init": {
                      "config": {
                          "commands": {
                              "01_add_instance_to_cluster": {
                                  "command": {
                                      "Fn::Sub": "echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config"
                                  }
                              },
                              "02_add_instance_to_cluster": {
                                  "command": "echo ECS_CHECKPOINT=false >> /etc/ecs/ecs.config"
                              },
                              "03_add_instance_to_cluster": {
                                  "command": "echo ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=10m >> /etc/ecs/ecs.config"
                              },
                              "04_add_instance_to_cluster": {
                                  "command": "echo ECS_DISABLE_IMAGE_CLEANUP=false >> /etc/ecs/ecs.config"
                              }
                          },
                          "files": {
                              "/etc/cfn/cfn-hup.conf": {
                                  "mode": 256,
                                  "owner": "root",
                                  "group": "root",
                                  "content": {
                                      "Fn::Sub": "[main]\nstack=${AWS::StackId}\nregion=${AWS::Region}\n"
                                  }
                              },
                              "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
                                  "content": {
                                      "Fn::Sub": "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\naction=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration\n"
                                  }
                              }
                          },
                          "services": {
                              "sysvinit": {
                                  "cfn-hup": {
                                      "enabled": true,
                                      "ensureRunning": true,
                                      "files": [
                                          "/etc/cfn/cfn-hup.conf",
                                          "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                                      ]
                                  }
                              }
                          }
                      }
                  }
              }
          },
          "ECSRole": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                  "Path": "/",
                  "AssumeRolePolicyDocument": "{\n    \"Statement\": [{\n        \"Action\": \"sts:AssumeRole\",\n        \"Effect\": \"Allow\",\n        \"Principal\": { \n            \"Service\": \"ec2.amazonaws.com\" \n        }\n    }]\n}\n",
                  "Policies": [
                      {
                          "PolicyName": "ecs-service",
                          "PolicyDocument": "{\n    \"Statement\": [{\n        \"Effect\": \"Allow\",\n        \"Action\": [\n            \"ecs:*\",\n            \"ecs:DeregisterContainerInstance\",\n            \"ecs:DiscoverPollEndpoint\",\n            \"ecs:Poll\",\n            \"ecs:RegisterContainerInstance\",\n            \"ecs:StartTelemetrySession\",\n            \"ecs:UpdateContainerInstancesState\",\n            \"ecs:Submit*\",\n            \"aws-marketplace:MeterUsage\",\n            \"ec2:AuthorizeSecurityGroupIngress\",\n            \"ec2:Describe*\",\n            \"elasticloadbalancing:DeregisterInstancesFromLoadBalancer\",\n            \"elasticloadbalancing:DeregisterTargets\",\n            \"elasticloadbalancing:Describe*\",\n            \"elasticloadbalancing:RegisterInstancesWithLoadBalancer\",\n            \"elasticloadbalancing:RegisterTargets\",\n            \"ecr:*\",\n            \"s3:*\",\n            \"logs:*\"\n        ],\n        \"Resource\": \"*\"\n    }]\n}\n"
                      }
                  ]
              }
          },
          "ECSInstanceProfile": {
              "Type": "AWS::IAM::InstanceProfile",
              "Properties": {
                  "Path": "/",
                  "Roles": [
                      {
                          "Ref": "ECSRole"
                      }
                  ]
              }
          }
      },
      "Outputs": {
          "VPC": {
              "Description": "A reference to the VPC.",
              "Value": {
                  "Fn::Sub": "https://console.aws.amazon.com/vpc/home?region=${AWS::Region}#vpcs:filter=${AWS::StackName}"
              }
          },
          "LoadBalancer": {
              "Description": "A reference to the Application Load Balancer.",
              "Value": {
                  "Fn::Sub": "https://console.aws.amazon.com/ec2/v2/home?region=${AWS::Region}#LoadBalancers:search=${AWS::StackName}"
              }
          },
          "DefaultTargetGroup": {
              "Description": "A reference to the default Target Group for Application Load Balancer.",
              "Value": {
                  "Fn::Sub": "https://console.aws.amazon.com/ec2/v2/home?region=${AWS::Region}#TargetGroups:search=${AWS::StackName}-default"
              }
          },
          "EC2Instance": {
              "Description": "A reference to the EC2 Instance",
              "Value": {
                  "Fn::Sub": "https://console.aws.amazon.com/ec2/v2/home?region=${AWS::Region}#Instances:sort=instanceState"
              }
          },
          "AutoScalingGroup": {
              "Description": "A reference to the Auto Scaling Group.",
              "Value": {
                  "Fn::Sub": "https://console.aws.amazon.com/ec2/autoscaling/home?region=${AWS::Region}#AutoScalingGroups:id=${ECSAutoScalingGroup}"
              }
          },
          "ECSCluster": {
              "Description": "A reference to the ECS cluster.",
              "Value": {
                  "Fn::Sub": "https://console.aws.amazon.com/ecs/home?region=${AWS::Region}#/clusters/${ECSCluster}/services"
              }
          },
          "ECR": {
              "Description": "A reference to the Amazon ECR (Amazon EC2 Container Registry).",
              "Value": {
                  "Fn::Sub": "https://console.aws.amazon.com/ecs/home?region=${AWS::Region}#/repositories/${EcrRepoName}#images"
              }
          },
          "S3Bucket": {
              "Description": "A reference to the S3 Bucket which will be used for customizing base image. If you selected 'Create S3 Bucket for Base Image Customization?' as 'No', then it will not be applicable.",
              "Value": {
                  "Fn::If": [
                      "CreateS3Bucket",
                      {
                          "Fn::Sub": "https://console.aws.amazon.com/s3/home?region=${AWS::Region}&bucket=${ExtBucketName}"
                      },
                      "Not Applicable"
                  ]
              }
          },
          "MonitoringURL": {
              "Description": "Monitoring Application URL",
              "Value": {
                  "Fn::If": [
                      "InstallMonitoringApp",
                      {
                          "Fn::Sub": "http://${MonitoringInstance.PublicIp}:8080/"
                      },
                      "Not Applicable"
                  ]
              }
          }
     }
}
